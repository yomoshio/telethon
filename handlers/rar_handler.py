import os
import tempfile
import hashlib
from aiogram import Router, F
from aiogram.types import Message
from services.extractor import extract_rar_from_file
from services.session_loader import load_sessions_from_folder
from services.spam_checker import check_spam

router = Router()

@router.message(F.document)
async def handle_rar(message: Message):
    if not message.document.file_name.endswith(".rar"):
        await message.answer("üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∞—Ä—Ö–∏–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .rar")
        return

    file = await message.bot.get_file(message.document.file_id)
    file_path = file.file_path
    file_size = message.document.file_size

    if file_size < 100:
        await message.answer("‚ùå –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return

    tmp_path = None
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".rar") as tmp_file:
            tmp_path = tmp_file.name

        await message.bot.download_file(file_path, tmp_path)

        downloaded_size = os.path.getsize(tmp_path)
        if downloaded_size != file_size:
            await message.answer(f"‚ùå –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é (–æ–∂–∏–¥–∞–ª–æ—Å—å {file_size} –±–∞–π—Ç, –ø–æ–ª—É—á–µ–Ω–æ {downloaded_size} –±–∞–π—Ç).")
            return

        with open(tmp_path, 'rb') as f:
            file_hash = hashlib.md5(f.read()).hexdigest()
        print(f"MD5 —Ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_hash}")

        try:
            extract_dir = extract_rar_from_file(tmp_path)
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
            return
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")
            return

        sessions = load_sessions_from_folder(extract_dir)
        if not sessions:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ.")
            return

        await message.answer(f"üë• –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(sessions)}\nüîç –ü—Ä–æ–≤–µ—Ä—è—é...")

        clean, spamban, errors = 0, 0, 0
        for sess in sessions:
            try:
                result = await check_spam(sess)
                if result == "clean":
                    clean += 1
                elif result == "spamban":
                    spamban += 1
                else:
                    errors += 1
            except:
                errors += 1

        await message.answer(f"‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {clean}\nüö´ –°–ø–∞–º–±–ª–æ–∫: {spamban}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {errors}")

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤: {e}")
    finally:
        if tmp_path and os.path.exists(tmp_path):
            os.remove(tmp_path)